class FilenameToLanguage:

    def __init__(self, filename):
        self.filename = filename
        # self.file_extension = self.get_file_extension(self.filename)
        # extensions map extracted from
        # programming-language-detector/java/programming-language-detector
        # /src/org/pescuma/programminglanguagedetector/FilenameToLanguage.java
        self.extensions = dict([
            ("abap", "ABAP"),
            ("as", "ActionScript"),
            ("ada", "Ada"),
            ("adb", "Ada"),
            ("ads", "Ada"),
            ("pad", "Ada"),
            ("adso", "ADSO/IDSM"),
            ("ample", "AMPLE"),
            ("dofile", "AMPLE"),
            ("startup", "AMPLE"),
            ("build.xml", "Ant"),
            ("trigger", "Apex Trigger"),
            ("ino", "Arduino Sketch"),
            ("pde", "Arduino Sketch"),
            ("asa", "ASP"),
            ("asp", "ASP"),
            ("asax", "ASP.Net"),
            ("ascx", "ASP.Net"),
            ("asmx", "ASP.Net"),
            ("aspx", "ASP.Net"),
            ("config", "ASP.Net"),
            ("master", "ASP.Net"),
            ("resx", "ASP.Net"),
            ("sitemap", "ASP.Net"),
            ("webinfo", "ASP.Net"),
            ("asm", "Assembly"),
            ("s", "Assembly"),
            ("S", "Assembly"),
            ("ahk", "AutoHotkey"),
            ("awk", "awk"),
            ("bash", "Bourne Again Shell"),
            ("sh", "Bourne Shell"),
            ("c", "C"),
            ("ec", "C"),
            ("pgc", "C"),
            ("csh", "C Shell"),
            ("tcsh", "C Shell"),
            ("cs", "C#"),
            ("C", "C++"),
            ("cc", "C++"),
            ("cpp", "C++"),
            ("cxx", "C++"),
            ("pcc", "C++"),
            ("h", "C/C++ Header"),
            ("hh", "C/C++ Header"),
            ("hpp", "C/C++ Header"),
            ("ccs", "CCS"),
            ("clj", "Clojure"),
            ("cljs", "ClojureScript"),
            ("cmake", "CMake"),
            ("cbl", "COBOL"),
            ("CBL", "COBOL"),
            ("cob", "COBOL"),
            ("coffee", "CoffeeScript"),
            ("cfm", "ColdFusion"),
            ("cfc", "ColdFusion CFScript"),
            ("css", "CSS"),
            ("pyx", "Cython"),
            ("d", "D"),
            ("da", "DAL"),
            ("dart", "Dart"),
            ("bat", "DOS Batch"),
            ("dtd", "DTD"),
            ("erl", "Erlang"),
            ("hrl", "Erlang"),
            ("exp", "Expect"),
            ("fs", "F#"),
            ("fsproj", "F#"),
            ("focexec", "Focus"),
            ("f", "Fortran 77"),
            ("f77", "Fortran 77"),
            ("pfo", "Fortran 77"),
            ("f90", "Fortran 90"),
            ("f95", "Fortran 95"),
            ("go", "Go"),
            ("gant", "Groovy"),
            ("groovy", "Groovy"),
            ("hs", "Haskell"),
            ("lhs", "Haskell"),
            ("htm", "HTML"),
            ("html", "HTML"),
            ("xhtml", "HTML"),
            ("idl", "IDL"),
            ("pro", "IDL"),
            ("ism", "InstallShield"),
            ("java", "Java"),
            ("js", "Javascript"),
            ("jsf", "JavaServer Faces"),
            ("jcl", "JCL"),
            ("jsp", "JSP"),
            ("ksc", "Kermit"),
            ("ksh", "Korn Shell"),
            ("less", "LESS"),
            ("l", "lex"),
            ("el", "Lisp"),
            ("jl", "Lisp"),
            ("lisp", "Lisp"),
            ("lsp", "Lisp"),
            ("sc", "Lisp"),
            ("scm", "Lisp"),
            ("cl", "Lisp or OpenCL"),
            ("oscript", "LiveLink OScript"),
            ("lua", "Lua"),
            ("ac", "m4"),
            ("m4", "m4"),
            ("am", "make"),
            ("gnumakefile", "make"),
            ("makefile", "make"),
            ("Makefile", "make"),
            ("m", "MATLAB or Objective C or MUMPS"),
            ("pom", "Maven"),
            ("pom.xml", "Maven"),
            ("i3", "Modula3"),
            ("ig", "Modula3"),
            ("m3", "Modula3"),
            ("mg", "Modula3"),
            ("csproj", "MSBuild scripts"),
            ("vbproj", "MSBuild scripts"),
            ("vcproj", "MSBuild scripts"),
            ("vcxproj", "MSBuild scripts"),
            ("wdproj", "MSBuild scripts"),
            ("mps", "MUMPS"),
            ("mxml", "MXML"),
            ("build", "NAnt scripts"),
            ("dmap", "NASTRAN DMAP"),
            ("mm", "Objective C++"),
            ("ml", "OCaml or ML"),
            ("mli", "OCaml or ML"),
            ("mll", "OCaml"),
            ("mly", "OCaml"),
            ("comp", "OpenGL Shading Language"),
            ("frag", "OpenGL Shading Language"),
            ("geom", "OpenGL Shading Language"),
            ("tese", "OpenGL Shading Language"),
            ("tesc", "OpenGL Shading Language"),
            ("vert", "OpenGL Shading Language"),
            ("glsl", "OpenGL Shading Language"),
            ("fmt", "Oracle Forms"),
            ("rex", "Oracle Reports"),
            ("dpr", "Pascal"),
            ("p", "Pascal"),
            ("pas", "Pascal"),
            ("pp", "Pascal"),
            ("pcl", "Patran Command Language"),
            ("ses", "Patran Command Language"),
            ("perl", "Perl"),
            ("pl", "Perl"),
            ("PL", "Perl"),
            ("plh", "Perl"),
            ("plx", "Perl"),
            ("pm", "Perl"),
            ("php", "PHP"),
            ("php3", "PHP"),
            ("php4", "PHP"),
            ("php5", "PHP"),
            ("inc", "PHP or Pascal"),
            ("pig", "Pig Latin"),
            ("ps1", "PowerShell"),
            ("py", "Python"),
            ("qml", "QML"),
            ("cshtml", "Razor"),
            ("rexx", "Rexx"),
            ("rb", "Ruby"),
            ("rhtml", "Ruby HTML"),
            ("rs", "Rust"),
            ("sass", "SASS"),
            ("scss", "SASS"),
            ("scala", "Scala"),
            ("sed", "sed"),
            ("il", "SKILL"),
            ("ils", "SKILL++"),
            ("smarty", "Smarty"),
            ("tpl", "Smarty"),
            ("sbl", "Softbridge Basic"),
            ("SBL", "Softbridge Basic"),
            ("psql", "SQL"),
            ("sql", "SQL"),
            ("data.sql", "SQL Data"),
            ("spc.sql", "SQL Stored Procedure"),
            ("spoc.sql", "SQL Stored Procedure"),
            ("sproc.sql", "SQL Stored Procedure"),
            ("udf.sql", "SQL Stored Procedure"),
            ("itk", "Tcl/Tk"),
            ("tcl", "Tcl/Tk"),
            ("tk", "Tcl/Tk"),
            ("def", "Teamcenter def"),
            ("met", "Teamcenter met"),
            ("mth", "Teamcenter mth"),
            ("tex", "Tex"),
            ("md", "Text"),
            ("txt", "Text"),
            ("vala", "Vala"),
            ("vapi", "Vala Header"),
            ("sv", "Verilog-SystemVerilog"),
            ("svh", "Verilog-SystemVerilog"),
            ("v", "Verilog-SystemVerilog"),
            ("vhd", "VHDL"),
            ("vhdl", "VHDL"),
            ("vim", "vim script"),
            ("bas", "Visual Basic"),
            ("cls", "Visual Basic"),
            ("ctl", "Visual Basic"),
            ("dsr", "Visual Basic"),
            ("frm", "Visual Basic"),
            ("vb", "Visual Basic"),
            ("vba", "Visual Basic"),
            ("vbp", "Visual Basic"),
            ("vbs", "Visual Basic"),
            ("vbw", "Visual Basic"),
            ("component", "Visualforce Component"),
            ("page", "Visualforce Page"),
            ("xaml", "XAML"),
            ("xml", "XML"),
            ("xsd", "XSD"),
            ("xsl", "XSLT"),
            ("xslt", "XSLT"),
            ("y", "yacc"),
            ("yaml", "YAML"),
            ("yml", "YAML")])
        self.language = self.get_language()

    # code snippet addpated from https://stackoverflow.com/questions/37896386/fixed-how-to-get-file-extension-correctly
    @staticmethod
    def file_extension(filename):
        if len(filename.split('.')) > 2:
            text = filename.split('.')[0] , '.'.join(filename.split('.')[-2:])
        else:
            text = filename.split('.')
        return text[1]

    def language(self):
        file_extension = self.get_file_extension(self.filename)
        return self.extensions.get(file_extension)
